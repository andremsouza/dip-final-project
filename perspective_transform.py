# %% [markdown]
# ## Imports
import numpy as np
import cv2
from corner_detection import CornerDetector
# %%


def calc_dst(pts):
    """ Calculates the destination points of the four-point transform.
    Used by the transform to get the output image shape.
    Args:
        pts (array-like): Four coordinates of the source image.
    Returns:
        numpy.ndarray: Four coordinates of the resulting image.
        numpy.ndarray: Shape of the resulting images
    """
    # Calculating shape and points of the resulting image
    rect = pts.astype(np.float32)
    (tl, tr, bl, br) = rect

    # compute the width of the new image
    widthA = np.sqrt(((br[0] - bl[0])**2) + ((br[1] - bl[1])**2))
    widthB = np.sqrt(((tr[0] - tl[0])**2) + ((tr[1] - tl[1])**2))
    maxWidth = max(int(widthA), int(widthB))

    # compute the height of the new image
    heightA = np.sqrt(((tr[0] - br[0])**2) + ((tr[1] - br[1])**2))
    heightB = np.sqrt(((tl[0] - bl[0])**2) + ((tl[1] - bl[1])**2))
    maxHeight = max(int(heightA), int(heightB))

    # Calculate destination points of the transform
    dst = np.array([[0, 0], [0, maxWidth - 1], [maxHeight - 1, 0],
                    [maxHeight - 1, maxWidth - 1]],
                   dtype=np.float32)
    new_shape = (maxHeight, maxWidth)

    return dst, new_shape


def projective_mapping(pts):
    """ Compute projective mapping of the four points in pts, by solving
        a linear system
    Used to compute the transform matrix for four-point transform.

    Note:
        Pay close attention to the order of the x,y coordinates
    Args:
        pts (array-like): Array of four coordinates of an digital image
    Returns:
        numpy.ndarray: Projective mapping of the four points.
    """
    # Solve system of linear equations
    a = np.array([[pts[0, 1], pts[1, 1], pts[2, 1]],
                  [pts[0, 0], pts[1, 0], pts[2, 0]], [1, 1, 1]],
                 dtype=np.double)
    b = np.array([[pts[3, 1]], [pts[3, 0]], [1]], dtype=np.double)
    x = np.linalg.solve(a, b)

    return a * x.T


def four_point_transform_matrix(src, dst):
    """ Compute transformation matrix for four-point transform.

    Args:
        src (array-like): Four coordinates of the source image.
        dst (array-like): Four coordinates for the destination image.
    Returns:
        numpy.ndarray: Matrix for transformation from the coordinates
            of the source image, to the coordinates of the output image
    """
    # Solve system of linear equations
    A = projective_mapping(src)
    B = projective_mapping(dst)

    # Inverting matrix A
    A_inv = np.linalg.inv(A)

    # Computing the combined matrix and returning
    return B @ A_inv


def four_point_transform_warp(img, matrix, new_shape):
    """Given the image, the transform matrix and the shape of the result,
        warp the source image to generate the result image of the four point
        transform.

    Note:
        Pay close attention to the order of the x and y coordinates in each
        operation.
    Args:
        img (array-like): array representation of the image to be warped
        matrix (array-like): matrix to transform the coordinates from img
            to the output image.
        new_shape (array-like): shape of the output image.
    Returns:
        numpy.ndarray: Warped image
    """
    ret_img = np.zeros((new_shape[0], new_shape[1], img.shape[2]),
                       dtype=np.uint8)
    for x in range(img.shape[0]):
        for y in range(img.shape[1]):
            new_pos = matrix @ np.array([[x], [y], [1.0]])
            new_pos = (new_pos / new_pos[2])[:2].astype(int)

            # if new_pos is in the new image, copy from the source image
            if (new_pos[1] > 0 and new_pos[1] < new_shape[0] and
                    new_pos[0] > 0 and new_pos[0] < new_shape[1]):
                ret_img[new_pos[1], new_pos[0]] = img[x, y]
                # Repairing noise generated by conversion from float to int
                if(new_pos[1] < new_shape[0] - 1):
                    ret_img[new_pos[1]+1, new_pos[0]] = img[x, y]
                if(new_pos[0] < new_shape[1] - 1):
                    ret_img[new_pos[1], new_pos[0]+1] = img[x, y]
    return ret_img


def four_point_transform(img, pts):
    """ Transform img, using four points in pts.
    The area of the source img between the 4 points pts will be transformed to
    a new rectangular image.

    Note:
        It is assumed that the points in pts are in the following order:
        [top-left, top-right, bottom-left, bottom-right]
    Args:
        img (array-like): Array representation of a digital image
        pts (array-like): Four coordinates of img
    Returns:
        numpy.ndarray: Resulting warped image
    """
    # Calculating shape and points of the resulting image
    dst, new_shape = calc_dst(pts)

    # Calculating transform matrix
    matrix = four_point_transform_matrix(pts, dst)

    warped = four_point_transform_warp(img, matrix, new_shape)

    # Return warped image
    return warped


def four_point_transform_cv2(img, pts):
    """ Transform img according to four selected points, into a rectangle
        to obtain a "bird's eye view".
    Utilizes openCV2 functions to obtain the result.

    Note:
        It is assumed that the points in pts are in the following order:
        [top-left, top-right, bottom-left, bottom-right]
    Args:
        img (array-like): Array rerpesentation of a digital image
        pts (array-like): Four coordinates of img
    Returns:
        numpy.ndarray: Resulting warped image
    """
    # compute rectangle from input image
    rect = pts.astype(np.float32)
    (tl, tr, bl, br) = rect

    # Compute shape of the destination image
    widthA = np.sqrt(((br[0] - bl[0])**2) + ((br[1] - bl[1])**2))
    widthB = np.sqrt(((tr[0] - tl[0])**2) + ((tr[1] - tl[1])**2))
    maxWidth = max(int(widthA), int(widthB))
    heightA = np.sqrt(((tr[0] - br[0])**2) + ((tr[1] - br[1])**2))
    heightB = np.sqrt(((tl[0] - bl[0])**2) + ((tl[1] - bl[1])**2))
    maxHeight = max(int(heightA), int(heightB))

    # construct the set of destination points to obtain
    dst = np.array([
        [0, 0],
        [maxWidth - 1, 0],
        [0, maxHeight - 1],
        [maxWidth - 1, maxHeight - 1],
    ],
                   dtype=np.float32)

    # compute the perspective transform matrix and then apply it
    M = cv2.getPerspectiveTransform(rect, dst)
    warped = cv2.warpPerspective(img, M, (maxWidth, maxHeight))

    # return the warped image
    return warped


# %%
# Running tests on an random image
# ! This segment of the code is used only for testing purposes
if __name__ == "__main__":
    import imageio
    import matplotlib.pyplot as plt
    import os
    # Listing example files
    example_files = [
        './images/' + f for f in os.listdir('./images')
        if os.path.isfile(os.path.join('./images', f))
    ]
    # Selecting random file for testing
    file_img = example_files[np.random.randint(0, len(example_files))]
    file_img = './images/806123698_321554.jpg'  # Good file for testing
    img = imageio.imread(file_img)
    plt.figure(figsize=(10, 10))
    plt.imshow(img)
    plt.show()

    # Finding corners from input image
    corner_points = CornerDetector(img).find_corners4().astype(np.float32)
    corner_points[:, [0, 1]] = corner_points[:, [1, 0]]

    # Computing the perspective transform
    # Comparing OpenCV's method with self-made implementation
    img2 = cv2.imread(file_img)
    img_p_cv2 = four_point_transform_cv2(img2, corner_points)
    img_p = four_point_transform(img, corner_points)
    plt.figure(figsize=(10, 10))
    plt.subplot(121)
    plt.imshow(cv2.cvtColor(img_p_cv2, cv2.COLOR_BGR2RGB))
    plt.subplot(122)
    plt.imshow(img_p)
    plt.show()
